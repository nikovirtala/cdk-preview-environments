name: Deploy
on:
  # To re-enable "prod" deploy, uncomment following lines.
  #
  # push:
  #   branches:
  #     - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    if: github.actor!= 'dependabot[bot]' # do not deploy, if pull-request is opened by dependabot.
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure Node.js
        uses: actions/setup-node@v2-beta
        with:
          node-version: '14'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: github-actions-session

      - name: Install Dependencies
        run: yarn --frozen-lockfile

      - name: Set CDK Application Stage
        id: stage
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo ::set-output name=stage::"prod"
          else
            echo ::set-output name=stage::"pr-${{ github.event.number }}"
          fi

      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v0.5.2
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ steps.stage.outputs.stage }}
          ref: ${{ github.head_ref }}

      - name: Bootstrap the CDK environment
        run: npx cdk bootstrap

      - name: Diff?
        run: npx cdk diff --context stage=${{ steps.stage.outputs.stage }}

      - name: Deploy!
        id: deploy
        run: | 
          npx cdk deploy \
            --require-approval never \
            --outputs-file outputs.json \
            --context stage=${{ steps.stage.outputs.stage }}
           echo ::set-output name=env_url::"http://$(jq -r '.[] | select(.nameloadbalancerdnsoutput).nameloadbalancerdnsoutput' outputs.json)"

      - name: Update GitHub Deployment Status
        uses: bobheadxi/deployments@v0.5.2
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.deploy.outputs.env_url }}